


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * FreeRTOS V202112.00
    3 00000000         ; * Copyright (C) 2020 Amazon.com, Inc. or its affiliate
                       s.  All Rights Reserved.
    4 00000000         ; *
    5 00000000         ; * Permission is hereby granted, free of charge, to any
                        person obtaining a copy of
    6 00000000         ; * this software and associated documentation files (th
                       e "Software"), to deal in
    7 00000000         ; * the Software without restriction, including without 
                       limitation the rights to
    8 00000000         ; * use, copy, modify, merge, publish, distribute, subli
                       cense, and/or sell copies of
    9 00000000         ; * the Software, and to permit persons to whom the Soft
                       ware is furnished to do so,
   10 00000000         ; * subject to the following conditions:
   11 00000000         ; *
   12 00000000         ; * The above copyright notice and this permission notic
                       e shall be included in all
   13 00000000         ; * copies or substantial portions of the Software.
   14 00000000         ; *
   15 00000000         ; * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY O
                       F ANY KIND, EXPRESS OR
   16 00000000         ; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                        OF MERCHANTABILITY, FITNESS
   17 00000000         ; * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO 
                       EVENT SHALL THE AUTHORS OR
   18 00000000         ; * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES O
                       R OTHER LIABILITY, WHETHER
   19 00000000         ; * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
                        FROM, OUT OF OR IN
   20 00000000         ; * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEA
                       LINGS IN THE SOFTWARE.
   21 00000000         ; *
   22 00000000         ; * http://www.FreeRTOS.org
   23 00000000         ; * http://aws.amazon.com/freertos
   24 00000000         ; *
   25 00000000         ; * 1 tab == 4 spaces!
   26 00000000         ; */
   27 00000000         
   28 00000000                 INCLUDE          portmacro.inc
    1 00000000         ;/*
    2 00000000         ; * FreeRTOS Kernel V10.4.6
    3 00000000         ; * Copyright (C) 2021 Amazon.com, Inc. or its affiliate
                       s.  All Rights Reserved.
    4 00000000         ; *
    5 00000000         ; * SPDX-License-Identifier: MIT
    6 00000000         ; *
    7 00000000         ; * Permission is hereby granted, free of charge, to any
                        person obtaining a copy of
    8 00000000         ; * this software and associated documentation files (th
                       e "Software"), to deal in
    9 00000000         ; * the Software without restriction, including without 
                       limitation the rights to
   10 00000000         ; * use, copy, modify, merge, publish, distribute, subli
                       cense, and/or sell copies of
   11 00000000         ; * the Software, and to permit persons to whom the Soft
                       ware is furnished to do so,
   12 00000000         ; * subject to the following conditions:



ARM Macro Assembler    Page 2 


   13 00000000         ; *
   14 00000000         ; * The above copyright notice and this permission notic
                       e shall be included in all
   15 00000000         ; * copies or substantial portions of the Software.
   16 00000000         ; *
   17 00000000         ; * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY O
                       F ANY KIND, EXPRESS OR
   18 00000000         ; * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                        OF MERCHANTABILITY, FITNESS
   19 00000000         ; * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO 
                       EVENT SHALL THE AUTHORS OR
   20 00000000         ; * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES O
                       R OTHER LIABILITY, WHETHER
   21 00000000         ; * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
                        FROM, OUT OF OR IN
   22 00000000         ; * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEA
                       LINGS IN THE SOFTWARE.
   23 00000000         ; *
   24 00000000         ; * https://www.FreeRTOS.org
   25 00000000         ; * https://github.com/FreeRTOS
   26 00000000         ; *
   27 00000000         ; */
   28 00000000         
   29 00000000                 IMPORT           ulCriticalNesting ;
   30 00000000                 IMPORT           pxCurrentTCB ;
   31 00000000         
   32 00000000         
   33 00000000                 MACRO
   34 00000000                 portRESTORE_CONTEXT
   35 00000000         
   36 00000000         
   37 00000000                 LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   38 00000000                 LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   39 00000000                 LDR              LR, [R0]
   40 00000000         
   41 00000000                 LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on...
   42 00000000                 LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   43 00000000                 STR              R1, [R0]    ;
   44 00000000         
   45 00000000                 LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   46 00000000                 MSR              SPSR_cxsf, R0 ;
   47 00000000         
   48 00000000                 LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.
   49 00000000                 NOP                          ;
   50 00000000         
   51 00000000                 LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address



ARM Macro Assembler    Page 3 


   52 00000000         
   53 00000000         ; And return - correcting the offset in the LR to obtain
                        ...
   54 00000000                 SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.
   55 00000000         
   56 00000000                 MEND
   57 00000000         
   58 00000000         ; /*****************************************************
                       *****************/
   59 00000000         
   60 00000000                 MACRO
   61 00000000                 portSAVE_CONTEXT
   62 00000000         
   63 00000000         
   64 00000000                 STMDB            SP!, {R0}   ; Store R0 first as
                                                             we need to use it.
                                                            
   65 00000000         
   66 00000000                 STMDB            SP,{SP}^    ; Set R0 to point t
                                                            o the task stack po
                                                            inter.
   67 00000000                 NOP                          ;
   68 00000000                 SUB              SP, SP, #4  ;
   69 00000000                 LDMIA            SP!,{R0}    ;
   70 00000000         
   71 00000000                 STMDB            R0!, {LR}   ; Push the return a
                                                            ddress onto the sta
                                                            ck.
   72 00000000                 MOV              LR, R0      ; Now we have saved
                                                             LR we can use it i
                                                            nstead of R0.
   73 00000000                 LDMIA            SP!, {R0}   ; Pop R0 so we can 
                                                            save it onto the sy
                                                            stem mode stack.
   74 00000000         
   75 00000000                 STMDB            LR,{R0-LR}^ ; Push all the syst
                                                            em mode registers o
                                                            nto the task stack.
                                                            
   76 00000000                 NOP                          ;
   77 00000000                 SUB              LR, LR, #60 ;
   78 00000000         
   79 00000000                 MRS              R0, SPSR    ; Push the SPSR ont
                                                            o the task stack.
   80 00000000                 STMDB            LR!, {R0}   ;
   81 00000000         
   82 00000000                 LDR              R0, =ulCriticalNesting ;
   83 00000000                 LDR              R0, [R0]    ;
   84 00000000                 STMDB            LR!, {R0}   ;
   85 00000000         
   86 00000000                 LDR              R0, =pxCurrentTCB ; Store the n
                                                            ew top of stack for
                                                             the task.
   87 00000000                 LDR              R1, [R0]    ;
   88 00000000                 STR              LR, [R1]    ;
   89 00000000         
   90 00000000                 MEND
   91 00000000         



ARM Macro Assembler    Page 4 


   92 00000000                 END
   29 00000000         
   30 00000000         ;The UART interrupt entry point is defined within an ass
                       embly wrapper
   31 00000000         ;within this file.  This takes care of the task context 
                       saving before it
   32 00000000         ;calls the main handler (vUART_ISRHandler()) which is wr
                       itten in C within
   33 00000000         ;serial.c.  The execution of the handler can unblock tas
                       ks that were blocked
   34 00000000         ;waiting for UART events.  Once the handler completes th
                       e asm wrapper
   35 00000000         ;finishes off by restoring the context of whichever task
                        is now selected to
   36 00000000         ;enter the RUNNING state (which might now be a different
                        task to that which
   37 00000000         ;was originally interrupted.
   38 00000000                 IMPORT           vUART_ISRHandler
   39 00000000                 EXPORT           vUART_ISREntry
   40 00000000         
   41 00000000         ;/* Interrupt entry must always be in ARM mode. */
   42 00000000                 ARM
   43 00000000                 AREA             |.text|, CODE, READONLY
   44 00000000         
   45 00000000         
   46 00000000         vUART_ISREntry
   47 00000000         
   48 00000000                 PRESERVE8
   49 00000000         
   50 00000000         ; Save the context of the interrupted task.
   51 00000000                 portSAVE_CONTEXT
   62 00000000         
   63 00000000         
   64 00000000 E92D0001        STMDB            SP!, {R0}   ; Store R0 first as
                                                             we need to use it.
                                                            
   65 00000004         
   66 00000004 E94D2000        STMDB            SP,{SP}^    ; Set R0 to point t
                                                            o the task stack po
                                                            inter.
   67 00000008 E1A00000        NOP                          ;
   68 0000000C E24DD004        SUB              SP, SP, #4  ;
   69 00000010 E8BD0001        LDMIA            SP!,{R0}    ;
   70 00000014         
   71 00000014 E9204000        STMDB            R0!, {LR}   ; Push the return a
                                                            ddress onto the sta
                                                            ck.
   72 00000018 E1A0E000        MOV              LR, R0      ; Now we have saved
                                                             LR we can use it i
                                                            nstead of R0.
   73 0000001C E8BD0001        LDMIA            SP!, {R0}   ; Pop R0 so we can 
                                                            save it onto the sy
                                                            stem mode stack.
   74 00000020         
   75 00000020 E94E7FFF        STMDB            LR,{R0-LR}^ ; Push all the syst
                                                            em mode registers o
                                                            nto the task stack.
                                                            
   76 00000024 E1A00000        NOP                          ;



ARM Macro Assembler    Page 5 


   77 00000028 E24EE03C        SUB              LR, LR, #60 ;
   78 0000002C         
   79 0000002C E14F0000        MRS              R0, SPSR    ; Push the SPSR ont
                                                            o the task stack.
   80 00000030 E92E0001        STMDB            LR!, {R0}   ;
   81 00000034         
   82 00000034 E59F004C        LDR              R0, =ulCriticalNesting ;
   83 00000038 E5900000        LDR              R0, [R0]    ;
   84 0000003C E92E0001        STMDB            LR!, {R0}   ;
   85 00000040         
   86 00000040 E59F0044        LDR              R0, =pxCurrentTCB ; Store the n
                                                            ew top of stack for
                                                             the task.
   87 00000044 E5901000        LDR              R1, [R0]    ;
   88 00000048 E581E000        STR              LR, [R1]    ;
   89 0000004C         
   52 0000004C         
   53 0000004C         ; Call the C handler function - defined within serial.c.
                       
   54 0000004C E59F003C        LDR              R0, =vUART_ISRHandler
   55 00000050 E1A0E00F        MOV              LR, PC
   56 00000054 E12FFF10        BX               R0
   57 00000058         
   58 00000058         ; Finish off by restoring the context of the task that h
                       as been chosen to
   59 00000058         ; run next - which might be a different task to that whi
                       ch was originally
   60 00000058         ; interrupted.
   61 00000058                 portRESTORE_CONTEXT
   35 00000058         
   36 00000058         
   37 00000058 E59F002C        LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   38 0000005C E5900000        LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   39 00000060 E590E000        LDR              LR, [R0]
   40 00000064         
   41 00000064 E59F001C        LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on...
   42 00000068 E8BE0002        LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   43 0000006C E5801000        STR              R1, [R0]    ;
   44 00000070         
   45 00000070 E8BE0001        LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   46 00000074 E16FF000        MSR              SPSR_cxsf, R0 ;
   47 00000078         
   48 00000078 E8DE7FFF        LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.
   49 0000007C E1A00000        NOP                          ;
   50 00000080         
   51 00000080 E59EE03C        LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address



ARM Macro Assembler    Page 6 


   52 00000084         
   53 00000084         ; And return - correcting the offset in the LR to obtain
                        ...
   54 00000084 E25EF004        SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.
   55 00000088         
   62 00000088         
   63 00000088                 END
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\b
in\serialisr.d -o.\bin\serialisr.o -I..\..\Source\portable\RVDS\ARM7_LPC21xx -I
C:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Phi
lips --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 529" --lis
t=.\serialisr.lst serial\serialISR.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 43 in file serial\serialISR.s
   Uses
      None
Comment: .text unused
vUART_ISREntry 00000000

Symbol: vUART_ISREntry
   Definitions
      At line 46 in file serial\serialISR.s
   Uses
      At line 39 in file serial\serialISR.s
Comment: vUART_ISREntry used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

pxCurrentTCB 00000000

Symbol: pxCurrentTCB
   Definitions
      At line 30 in file ..\..\Source\portable\RVDS\ARM7_LPC21xx\portmacro.inc
   Uses
      At line 86 in macro portSAVE_CONTEXT
      at line 51 in file serial\serialISR.s
      At line 37 in macro portRESTORE_CONTEXT
      at line 61 in file serial\serialISR.s

ulCriticalNesting 00000000

Symbol: ulCriticalNesting
   Definitions
      At line 29 in file ..\..\Source\portable\RVDS\ARM7_LPC21xx\portmacro.inc
   Uses
      At line 82 in macro portSAVE_CONTEXT
      at line 51 in file serial\serialISR.s
      At line 41 in macro portRESTORE_CONTEXT
      at line 61 in file serial\serialISR.s

vUART_ISRHandler 00000000

Symbol: vUART_ISRHandler
   Definitions
      At line 38 in file serial\serialISR.s
   Uses
      At line 54 in file serial\serialISR.s
Comment: vUART_ISRHandler used once
3 symbols
339 symbols in table
